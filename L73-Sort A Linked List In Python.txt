SORT A LINKED LIST IN PYTHON:-

class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
def merge(left,right):
    #if left is empty
    if(left ==None):
        return right
    if(right ==None):
        return left
    
    if left.dat<=right.data:
        head=left
        left=left.next
    else:
        head=right
        right=right.next
        
    curr=head
    
    while left and right:
        if left.data<=right.data:
            curr.next=left
            left=left.next
        else:
            curr.next=right
            right=right.next
        curr=curr.next
        
    if left==None:
        curr.next=right
    else:
        curr.next=left
    
    return head
    
    
def middle(head):
    slow,fast=head,head.next
    while fast and fast.next:
        slow=slow.next
        fast=fast.next.next
    return slow
        
def mergeSort(head):
    #when on enode or empty list
    if(head.next==None or head==None):
        return head
    #split the list into two halves
    mid=middle(head)
    left=head
    right=mid.next
    mid.next=None
    
    #merge sort the two lists
    left=mergeSort(left)
    right=mergeSort(right)
    head=merge(left,right)
    return head



def ll(arr):
    if len(arr)==0:
        return None
    head=Node(arr[0])
    last=head
    for data in arr[1:]:
        last.next=Node(data)
        last=last.next
    return head
    
def printll(head):
    while head:
        print(head.data)
        head=head.next
    print()
    
    
arr=list(int(i) for i in input().strip().split(' '))
l=ll(arr[:-1])
l=mergeSort(l)
printll(l)